# age variable
#sick_test$age[sick_test$age>120] = NA
#sick_train$age[sick_train$age>120] = NA
#sick_test$age <- sick_test$age %>% replace_na(mean(sick_train$age, na.rm = TRUE))  # first use mean of this column in sick_train
#sick_train$age <- sick_train$age %>% replace_na(mean(sick_train$age, na.rm = TRUE)) # then impute na in sick_train
#sick_train <- knnImputation(sick_train, k = 10)
#sick_test <- knnImputation(sick_test, k = 10, distData = sick_train)
#learner3 = makeLearner("classif.rpart", predict.type = "prob")
#r = resample(learner3, task, cv5, list(mlr::auc, auprc))
#r$aggr
task = makeClassifTask(data=sick_train, target="Class", positive="1")
learner_rpart = makeLearner("classif.rpart", predict.type='prob')
task_rpart = makeClassifTask(data=sick_train, target="Class", positive="1")
parameters = makeParamSet(
makeIntegerParam("maxdepth", lower = 1, upper = 30),
makeIntegerParam("minsplit", lower = 1, upper = 30),
makeNumericParam("cp", lower = 0, upper = 1)
)
ctrl <-  makeTuneControlRandom(maxit = 100L)
cv <-  makeResampleDesc("CV", iters = 5L)
results <- tuneParams(learner_rpart, task = task_rpart, resampling = cv,  par.set = parameters, control = ctrl, measures = list(mlr::auc), show.info = FALSE)
learner_rpart_tuned <- setHyperPars(learner_rpart, minsplit=results$x$minsplit, cp=results$x$cp, maxdepth=results$x$maxdepth)
r = resample(learner_rpart_tuned, task, cv5, list(mlr::auc, auprc))
r$aggr
rpart.plot(model_rpart)
library(rpart.plot)
rpart.plot(model_rpart)
model_rpart <- train(learner_rpart_tuned, task)
predict_rpart <- predict(model_rpart, newdata = sick_test)
prob <- getPredictionProbabilities(predict_rpart)
fg <- prob[sick_test[,"Class"] == 1]
bg <-  prob[sick_test[,"Class"] == 0]
pr <- pr.curve(scores.class0 = fg, scores.class1 = bg, curve = T)
plot(pr)
pr$auc.integral
rpart.plot(model_rpart)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE)
library(OpenML)
library(dplyr)
library(tidyverse)
library(kableExtra)
library(visdat)
library(naniar)
library(DataExplorer)
library(caret)
library(PRROC)
library(corrplot)
library(glmnet)
library(mlr)
library(auprc)
library(rpart)
library(DMwR)
set.seed(10)
# download data
list_all_openml_dataset <- listOMLDataSets()
#sick dataset
openml_id <- 38
data_name <- list_all_openml_dataset[list_all_openml_dataset[,'data.id'] == openml_id,'name']
dataset_openml <- getOMLDataSet(data.id = openml_id)
dataset_raw <- dataset_openml$data
target_column <- dataset_openml$target.features
dataset <- dataset_raw %>%
select(-c(TBG, TBG_measured,hypopituitary))
dummy <- dummyVars(~referral_source , data = dataset)
new_vars <- predict(dummy, dataset)
dataset <- dataset %>% select(-referral_source)
dataset <- cbind(dataset, new_vars)
dataset <- dataset %>% select(-referral_source.other)
dataset$sex <- as.numeric(dataset$sex == 'F') # sex variable to 0/1
dataset$Class = as.factor(as.numeric(dataset$Class=='sick'))
correlation_matrix <- cor(sapply(dataset, as.numeric, MARGIN=2), use = "pairwise.complete.obs")
corrplot(correlation_matrix)
cor(as.numeric(dataset$FTI_measured), as.numeric(dataset$T4U_measured))
dataset <- dataset %>% select(-T4U_measured)
split_index <- read.csv('indeksy_treningowe.txt', sep = ' ', row.names = 1, header = TRUE)$x
sick_train <- dataset[split_index,]
sick_test <- dataset[-split_index,]
auprc <- mlr::makeMeasure(id = "auprc",
minimize = FALSE,
properties = c("classif", "prob"),
fun = function(task, model, pred, feats, extra.args){
probs <- getPredictionProbabilities(pred)
fg <- probs[pred$data$truth == 1]
bg <- probs[pred$data$truth == 0]
pr <- pr.curve(scores.class0 = fg, scores.class1 = bg, curve = T)
pr$auc.integral
})
task = makeClassifTask(data=sick_train, target="Class", positive="1")
learner = makeLearner("classif.rpart", predict.type = "prob")
r = resample(learner, task, cv5, list(mlr::auc, auprc))
r$aggr
gg_miss_var(dataset,
show_pct = TRUE) +
ylim(0, 100) +
labs(title = "Missing dataset",
x = "Features",
y = "Percent of missings")
sick_test_na = sick_test
sick_train_na = sick_train
# sex variable
prob_F = mean(sick_train$sex, na.rm=TRUE)
sick_train$sex <- sick_train$sex %>% replace_na(as.numeric(runif(1)<prob_F))
sick_test$sex <- sick_test$sex %>% replace_na(as.numeric(runif(1)<prob_F))
# age variable
sick_test$age[sick_test$age>120] = NA
sick_train$age[sick_train$age>120] = NA
sick_test$age <- sick_test$age %>% replace_na(mean(sick_train$age, na.rm = TRUE))  # first use mean of this column in sick_train
sick_train$age <- sick_train$age %>% replace_na(mean(sick_train$age, na.rm = TRUE)) # then impute na in sick_train
# other variable with missing values
columns_missing <- c('T3', 'T4U', 'TSH', 'TT4', 'age', 'FTI')
for(col in columns_missing){
sick_test[,col] <- sick_test[,col] %>% replace_na(mean(sick_train[,col], na.rm = TRUE))  # first use mean of this column in sick_train
sick_train[,col] <- sick_train[,col] %>% replace_na(mean(sick_train[,col], na.rm = TRUE)) # then impute na in sick_train
}
learner2 = makeLearner("classif.rpart", predict.type = "prob")
r = resample(learner2, task, cv5, list(mlr::auc, auprc))
r$aggr
#sick_test = sick_test_na
#sick_train = sick_train_na
# age variable
#sick_test$age[sick_test$age>120] = NA
#sick_train$age[sick_train$age>120] = NA
#sick_test$age <- sick_test$age %>% replace_na(mean(sick_train$age, na.rm = TRUE))  # first use mean of this column in sick_train
#sick_train$age <- sick_train$age %>% replace_na(mean(sick_train$age, na.rm = TRUE)) # then impute na in sick_train
#sick_train <- knnImputation(sick_train, k = 10)
#sick_test <- knnImputation(sick_test, k = 10, distData = sick_train)
#learner3 = makeLearner("classif.rpart", predict.type = "prob")
#r = resample(learner3, task, cv5, list(mlr::auc, auprc))
#r$aggr
task = makeClassifTask(data=sick_train, target="Class", positive="1")
learner_rpart = makeLearner("classif.rpart", predict.type='prob')
task_rpart = makeClassifTask(data=sick_train, target="Class", positive="1")
parameters = makeParamSet(
makeIntegerParam("maxdepth", lower = 1, upper = 30),
makeIntegerParam("minsplit", lower = 1, upper = 30),
makeNumericParam("cp", lower = 0, upper = 1)
)
ctrl <-  makeTuneControlRandom(maxit = 100L)
cv <-  makeResampleDesc("CV", iters = 5L)
results <- tuneParams(learner_rpart, task = task_rpart, resampling = cv,  par.set = parameters, control = ctrl, measures = list(mlr::auc), show.info = FALSE)
learner_rpart_tuned <- setHyperPars(learner_rpart, minsplit=results$x$minsplit, cp=results$x$cp, maxdepth=results$x$maxdepth)
r = resample(learner_rpart_tuned, task, cv5, list(mlr::auc, auprc))
r$aggr
model_rpart <- train(learner_rpart_tuned, task)
predict_rpart <- predict(model_rpart, newdata = sick_test)
prob <- getPredictionProbabilities(predict_rpart)
fg <- prob[sick_test[,"Class"] == 1]
bg <-  prob[sick_test[,"Class"] == 0]
pr <- pr.curve(scores.class0 = fg, scores.class1 = bg, curve = T)
plot(pr)
pr$auc.integral
knitr::opts_chunk$set(echo = FALSE, warning = FALSE)
library(OpenML)
library(dplyr)
library(tidyverse)
library(kableExtra)
library(visdat)
library(naniar)
library(DataExplorer)
library(caret)
library(PRROC)
library(corrplot)
library(glmnet)
library(mlr)
library(auprc)
library(rpart)
library(DMwR)
set.seed(10)
# download data
list_all_openml_dataset <- listOMLDataSets()
#sick dataset
openml_id <- 38
data_name <- list_all_openml_dataset[list_all_openml_dataset[,'data.id'] == openml_id,'name']
dataset_openml <- getOMLDataSet(data.id = openml_id)
dataset_raw <- dataset_openml$data
target_column <- dataset_openml$target.features
dataset <- dataset_raw %>%
select(-c(TBG, TBG_measured,hypopituitary))
dummy <- dummyVars(~referral_source , data = dataset)
new_vars <- predict(dummy, dataset)
dataset <- dataset %>% select(-referral_source)
dataset <- cbind(dataset, new_vars)
dataset <- dataset %>% select(-referral_source.other)
dataset$sex <- as.numeric(dataset$sex == 'F') # sex variable to 0/1
dataset$Class = as.factor(as.numeric(dataset$Class=='sick'))
correlation_matrix <- cor(sapply(dataset, as.numeric, MARGIN=2), use = "pairwise.complete.obs")
corrplot(correlation_matrix)
cor(as.numeric(dataset$FTI_measured), as.numeric(dataset$T4U_measured))
dataset <- dataset %>% select(-T4U_measured)
split_index <- read.csv('indeksy_treningowe.txt', sep = ' ', row.names = 1, header = TRUE)$x
sick_train <- dataset[split_index,]
sick_test <- dataset[-split_index,]
auprc <- mlr::makeMeasure(id = "auprc",
minimize = FALSE,
properties = c("classif", "prob"),
fun = function(task, model, pred, feats, extra.args){
probs <- getPredictionProbabilities(pred)
fg <- probs[pred$data$truth == 1]
bg <- probs[pred$data$truth == 0]
pr <- pr.curve(scores.class0 = fg, scores.class1 = bg, curve = T)
pr$auc.integral
})
task = makeClassifTask(data=sick_train, target="Class", positive="1")
learner = makeLearner("classif.rpart", predict.type = "prob")
r = resample(learner, task, cv5, list(mlr::auc, auprc))
r$aggr
gg_miss_var(dataset,
show_pct = TRUE) +
ylim(0, 100) +
labs(title = "Missing dataset",
x = "Features",
y = "Percent of missings")
sick_test_na = sick_test
sick_train_na = sick_train
# sex variable
prob_F = mean(sick_train$sex, na.rm=TRUE)
sick_train$sex <- sick_train$sex %>% replace_na(as.numeric(runif(1)<prob_F))
sick_test$sex <- sick_test$sex %>% replace_na(as.numeric(runif(1)<prob_F))
# age variable
sick_test$age[sick_test$age>120] = NA
sick_train$age[sick_train$age>120] = NA
sick_test$age <- sick_test$age %>% replace_na(mean(sick_train$age, na.rm = TRUE))  # first use mean of this column in sick_train
sick_train$age <- sick_train$age %>% replace_na(mean(sick_train$age, na.rm = TRUE)) # then impute na in sick_train
# other variable with missing values
columns_missing <- c('T3', 'T4U', 'TSH', 'TT4', 'age', 'FTI')
for(col in columns_missing){
sick_test[,col] <- sick_test[,col] %>% replace_na(mean(sick_train[,col], na.rm = TRUE))  # first use mean of this column in sick_train
sick_train[,col] <- sick_train[,col] %>% replace_na(mean(sick_train[,col], na.rm = TRUE)) # then impute na in sick_train
}
r$aggr
=learner_rpart = makeLearner("classif.rpart", predict.type='prob')
task
tsk = makeClassifTask(data=sick_train, target="Class", positive="1")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE)
library(OpenML)
library(dplyr)
library(tidyverse)
library(kableExtra)
library(visdat)
library(naniar)
library(DataExplorer)
library(caret)
library(PRROC)
library(corrplot)
library(glmnet)
library(mlr)
library(auprc)
library(rpart)
library(DMwR)
set.seed(10)
# download data
list_all_openml_dataset <- listOMLDataSets()
#sick dataset
openml_id <- 38
data_name <- list_all_openml_dataset[list_all_openml_dataset[,'data.id'] == openml_id,'name']
dataset_openml <- getOMLDataSet(data.id = openml_id)
dataset_raw <- dataset_openml$data
target_column <- dataset_openml$target.features
dataset <- dataset_raw %>%
select(-c(TBG, TBG_measured,hypopituitary))
dummy <- dummyVars(~referral_source , data = dataset)
new_vars <- predict(dummy, dataset)
dataset <- dataset %>% select(-referral_source)
dataset <- cbind(dataset, new_vars)
dataset <- dataset %>% select(-referral_source.other)
dataset$sex <- as.numeric(dataset$sex == 'F') # sex variable to 0/1
dataset$Class = as.factor(as.numeric(dataset$Class=='sick'))
correlation_matrix <- cor(sapply(dataset, as.numeric, MARGIN=2), use = "pairwise.complete.obs")
corrplot(correlation_matrix)
cor(as.numeric(dataset$FTI_measured), as.numeric(dataset$T4U_measured))
dataset <- dataset %>% select(-T4U_measured)
split_index <- read.csv('indeksy_treningowe.txt', sep = ' ', row.names = 1, header = TRUE)$x
sick_train <- dataset[split_index,]
sick_test <- dataset[-split_index,]
auprc <- mlr::makeMeasure(id = "auprc",
minimize = FALSE,
properties = c("classif", "prob"),
fun = function(task, model, pred, feats, extra.args){
probs <- getPredictionProbabilities(pred)
fg <- probs[pred$data$truth == 1]
bg <- probs[pred$data$truth == 0]
pr <- pr.curve(scores.class0 = fg, scores.class1 = bg, curve = T)
pr$auc.integral
})
task = makeClassifTask(data=sick_train, target="Class", positive="1")
learner = makeLearner("classif.rpart", predict.type = "prob")
r = resample(learner, task, cv5, list(mlr::auc, auprc))
r$aggr
gg_miss_var(dataset,
show_pct = TRUE) +
ylim(0, 100) +
labs(title = "Missing dataset",
x = "Features",
y = "Percent of missings")
sick_test_na = sick_test
sick_train_na = sick_train
# sex variable
prob_F = mean(sick_train$sex, na.rm=TRUE)
sick_train$sex <- sick_train$sex %>% replace_na(as.numeric(runif(1)<prob_F))
sick_test$sex <- sick_test$sex %>% replace_na(as.numeric(runif(1)<prob_F))
# age variable
sick_test$age[sick_test$age>120] = NA
sick_train$age[sick_train$age>120] = NA
sick_test$age <- sick_test$age %>% replace_na(mean(sick_train$age, na.rm = TRUE))  # first use mean of this column in sick_train
sick_train$age <- sick_train$age %>% replace_na(mean(sick_train$age, na.rm = TRUE)) # then impute na in sick_train
# other variable with missing values
columns_missing <- c('T3', 'T4U', 'TSH', 'TT4', 'age', 'FTI')
for(col in columns_missing){
sick_test[,col] <- sick_test[,col] %>% replace_na(mean(sick_train[,col], na.rm = TRUE))  # first use mean of this column in sick_train
sick_train[,col] <- sick_train[,col] %>% replace_na(mean(sick_train[,col], na.rm = TRUE)) # then impute na in sick_train
}
learner2 = makeLearner("classif.rpart", predict.type = "prob")
r = resample(learner2, task, cv5, list(mlr::auc, auprc))
r$aggr
#sick_test = sick_test_na
#sick_train = sick_train_na
# age variable
#sick_test$age[sick_test$age>120] = NA
#sick_train$age[sick_train$age>120] = NA
#sick_test$age <- sick_test$age %>% replace_na(mean(sick_train$age, na.rm = TRUE))  # first use mean of this column in sick_train
#sick_train$age <- sick_train$age %>% replace_na(mean(sick_train$age, na.rm = TRUE)) # then impute na in sick_train
#sick_train <- knnImputation(sick_train, k = 10)
#sick_test <- knnImputation(sick_test, k = 10, distData = sick_train)
#learner3 = makeLearner("classif.rpart", predict.type = "prob")
#r = resample(learner3, task, cv5, list(mlr::auc, auprc))
#r$aggr
task = makeClassifTask(data=sick_train, target="Class", positive="1")
learner_rpart = makeLearner("classif.rpart", predict.type='prob')
task_rpart = makeClassifTask(data=sick_train, target="Class", positive="1")
parameters = makeParamSet(
makeIntegerParam("maxdepth", lower = 1, upper = 30),
makeIntegerParam("minsplit", lower = 1, upper = 30),
makeNumericParam("cp", lower = 0, upper = 1)
)
ctrl <-  makeTuneControlRandom(maxit = 100L)
cv <-  makeResampleDesc("CV", iters = 5L)
results <- tuneParams(learner_rpart, task = task_rpart, resampling = cv,  par.set = parameters, control = ctrl, measures = list(mlr::auc), show.info = FALSE)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE)
library(OpenML)
library(dplyr)
library(tidyverse)
library(kableExtra)
library(visdat)
library(naniar)
library(DataExplorer)
library(caret)
library(PRROC)
library(corrplot)
library(glmnet)
library(mlr)
library(auprc)
library(rpart)
library(DMwR)
set.seed(10)
# download data
list_all_openml_dataset <- listOMLDataSets()
#sick dataset
openml_id <- 38
data_name <- list_all_openml_dataset[list_all_openml_dataset[,'data.id'] == openml_id,'name']
dataset_openml <- getOMLDataSet(data.id = openml_id)
dataset_raw <- dataset_openml$data
target_column <- dataset_openml$target.features
dataset <- dataset_raw %>%
select(-c(TBG, TBG_measured,hypopituitary))
dummy <- dummyVars(~referral_source , data = dataset)
new_vars <- predict(dummy, dataset)
dataset <- dataset %>% select(-referral_source)
dataset <- cbind(dataset, new_vars)
dataset <- dataset %>% select(-referral_source.other)
dataset$sex <- as.numeric(dataset$sex == 'F') # sex variable to 0/1
dataset$Class = as.factor(as.numeric(dataset$Class=='sick'))
correlation_matrix <- cor(sapply(dataset, as.numeric, MARGIN=2), use = "pairwise.complete.obs")
corrplot(correlation_matrix)
cor(as.numeric(dataset$FTI_measured), as.numeric(dataset$T4U_measured))
dataset <- dataset %>% select(-T4U_measured)
split_index <- read.csv('indeksy_treningowe.txt', sep = ' ', row.names = 1, header = TRUE)$x
sick_train <- dataset[split_index,]
sick_test <- dataset[-split_index,]
auprc <- mlr::makeMeasure(id = "auprc",
minimize = FALSE,
properties = c("classif", "prob"),
fun = function(task, model, pred, feats, extra.args){
probs <- getPredictionProbabilities(pred)
fg <- probs[pred$data$truth == 1]
bg <- probs[pred$data$truth == 0]
pr <- pr.curve(scores.class0 = fg, scores.class1 = bg, curve = T)
pr$auc.integral
})
tsk = makeClassifTask(data=sick_train, target="Class", positive="1")
learner = makeLearner("classif.rpart", predict.type = "prob")
r = resample(learner, task, cv5, list(mlr::auc, auprc))
r$aggr
tsk
gg_miss_var(dataset,
show_pct = TRUE) +
ylim(0, 100) +
labs(title = "Missing dataset",
x = "Features",
y = "Percent of missings")
sick_test_na = sick_test
sick_train_na = sick_train
# sex variable
prob_F = mean(sick_train$sex, na.rm=TRUE)
sick_train$sex <- sick_train$sex %>% replace_na(as.numeric(runif(1)<prob_F))
sick_test$sex <- sick_test$sex %>% replace_na(as.numeric(runif(1)<prob_F))
# age variable
sick_test$age[sick_test$age>120] = NA
sick_train$age[sick_train$age>120] = NA
sick_test$age <- sick_test$age %>% replace_na(mean(sick_train$age, na.rm = TRUE))  # first use mean of this column in sick_train
sick_train$age <- sick_train$age %>% replace_na(mean(sick_train$age, na.rm = TRUE)) # then impute na in sick_train
# other variable with missing values
columns_missing <- c('T3', 'T4U', 'TSH', 'TT4', 'age', 'FTI')
for(col in columns_missing){
sick_test[,col] <- sick_test[,col] %>% replace_na(mean(sick_train[,col], na.rm = TRUE))  # first use mean of this column in sick_train
sick_train[,col] <- sick_train[,col] %>% replace_na(mean(sick_train[,col], na.rm = TRUE)) # then impute na in sick_train
}
learner2 = makeLearner("classif.rpart", predict.type = "prob")
r = resample(learner2, task, cv5, list(mlr::auc, auprc))
learner2 = makeLearner("classif.rpart", predict.type = "prob")
r = resample(learner2, tsk, cv5, list(mlr::auc, auprc))
r$aggr
knitr::opts_chunk$set(echo = FALSE, warning = FALSE)
library(OpenML)
library(dplyr)
library(tidyverse)
library(kableExtra)
library(visdat)
library(naniar)
library(DataExplorer)
library(caret)
library(PRROC)
library(corrplot)
library(glmnet)
library(mlr)
library(auprc)
library(rpart)
library(DMwR)
set.seed(10)
# download data
list_all_openml_dataset <- listOMLDataSets()
#sick dataset
openml_id <- 38
data_name <- list_all_openml_dataset[list_all_openml_dataset[,'data.id'] == openml_id,'name']
dataset_openml <- getOMLDataSet(data.id = openml_id)
dataset_raw <- dataset_openml$data
target_column <- dataset_openml$target.features
dataset <- dataset_raw %>%
select(-c(TBG, TBG_measured,hypopituitary))
dummy <- dummyVars(~referral_source , data = dataset)
new_vars <- predict(dummy, dataset)
dataset <- dataset %>% select(-referral_source)
dataset <- cbind(dataset, new_vars)
dataset <- dataset %>% select(-referral_source.other)
dataset$sex <- as.numeric(dataset$sex == 'F') # sex variable to 0/1
dataset$Class = as.factor(as.numeric(dataset$Class=='sick'))
correlation_matrix <- cor(sapply(dataset, as.numeric, MARGIN=2), use = "pairwise.complete.obs")
corrplot(correlation_matrix)
cor(as.numeric(dataset$FTI_measured), as.numeric(dataset$T4U_measured))
dataset <- dataset %>% select(-T4U_measured)
split_index <- read.csv('indeksy_treningowe.txt', sep = ' ', row.names = 1, header = TRUE)$x
setwd("~/Pulpit/WB/2020L-WarsztatyBadawcze-InzynieriaCech/PracaDomowa1/WichrowskaAleksandra")
setwd("~/Pulpit/WB/2020L-WarsztatyBadawcze-InzynieriaCech/PracaDomowa1/WichrowskaAleksandra")
split_index <- read.csv('indeksy_treningowe.txt', sep = ' ', row.names = 1, header = TRUE)$x
knitr::opts_chunk$set(echo = FALSE, warning = FALSE)
library(OpenML)
library(dplyr)
library(tidyverse)
library(kableExtra)
library(visdat)
library(naniar)
library(DataExplorer)
library(caret)
library(PRROC)
library(corrplot)
library(glmnet)
library(mlr)
library(auprc)
library(rpart)
library(DMwR)
set.seed(10)
# download data
list_all_openml_dataset <- listOMLDataSets()
#sick dataset
openml_id <- 38
data_name <- list_all_openml_dataset[list_all_openml_dataset[,'data.id'] == openml_id,'name']
dataset_openml <- getOMLDataSet(data.id = openml_id)
dataset_raw <- dataset_openml$data
target_column <- dataset_openml$target.features
dataset <- dataset_raw %>%
select(-c(TBG, TBG_measured,hypopituitary))
dummy <- dummyVars(~referral_source , data = dataset)
new_vars <- predict(dummy, dataset)
dataset <- dataset %>% select(-referral_source)
dataset <- cbind(dataset, new_vars)
dataset <- dataset %>% select(-referral_source.other)
dataset$sex <- as.numeric(dataset$sex == 'F') # sex variable to 0/1
dataset$Class = as.factor(as.numeric(dataset$Class=='sick'))
correlation_matrix <- cor(sapply(dataset, as.numeric, MARGIN=2), use = "pairwise.complete.obs")
corrplot(correlation_matrix)
cor(as.numeric(dataset$FTI_measured), as.numeric(dataset$T4U_measured))
dataset <- dataset %>% select(-T4U_measured)
split_index <- read.csv('indeksy_treningowe.txt', sep = ' ', row.names = 1, header = TRUE)$x
auprc <- mlr::makeMeasure(id = "auprc",
minimize = FALSE,
properties = c("classif", "prob"),
fun = function(task, model, pred, feats, extra.args){
probs <- getPredictionProbabilities(pred)
fg <- probs[pred$data$truth == 1]
bg <- probs[pred$data$truth == 0]
pr <- pr.curve(scores.class0 = fg, scores.class1 = bg, curve = T)
pr$auc.integral
})
